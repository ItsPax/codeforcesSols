# algorithm too slow right now
# need a strategy more sophisticated than brutish dynamic?
def bigPt(numDict,pt,ptList):
	print(numDict)
	if len(numDict) == 0:
		ptList.append(pt)
	numList = []
	for num in numDict:
		numList.append(num)
	print('before going through the loop, ',numList)
	for num in numList:
		print('while in loop ',numList)
		[temp0,temp1,temp2] = [0,0,0]
		temp0 = numDict[num]
		numDict[num] -= 1
		if numDict[num] == 0:
			numDict.pop(num)
		if num+1 in numDict:
			temp1 = numDict[num+1]
			numDict.pop(num+1)
		if num-1 in numDict:
			temp2 = numDict[num-1]
			numDict.pop(num-1)
		bigPt(numDict,pt+num,ptList)
		numDict[num] = temp0
		if temp1 != 0:
			numDict[num+1] = temp1
		if temp2 != 0:
			numDict[num-1] = temp2
	return ptList
#n = input()
#numList = [int(x) for x in input().split()]
numList = [int(x) for x in '6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 4 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 8 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4'.split()]
numDict = {}
for x in numList:
	if x not in numDict:
		numDict[x] = 0
	numDict[x] += 1
print(numDict)
ptList = bigPt(numDict,0,[])
print(ptList)
bigNum = 0
for num in ptList:
	if num > bigNum:
		bigNum = num
print(bigNum)

