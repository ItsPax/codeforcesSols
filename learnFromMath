# composite number is a number that is not prime
# go through all numbers that are below the input number, and as long as it's not prime
# and it's greater than the number, check if the other number is not prime
# generate all primes below that number via a quickPrime sieve (my algorithm)
# check all numbers not in that primeList and as long as the difference isn't in primeList then 
# output those two numbers 
#
def fakeBach(n):
	primeDict = quickSieve(n)
	for num in range(2,n):
		if primeDict[num] == False:
			i = n - num
			if primeDict[i] == False:
				return [str(num),str(i)]
def quickSieve(n):
	numDict = {2:True}
	for i in range(3,n+1):
		numDict[i] = True
	for num in numDict:
		if numDict[num]:
			i = num
			while num <= n-i:
				num += i
				numDict[num] = False
	return numDict 

print(' '.join((fakeBach(int(input())))))

